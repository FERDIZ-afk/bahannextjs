// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

enum Status {
  COMPLETED
  ONGOING
}

enum PostStatus {
  PUBLISHED
  DRAFT
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @db.Timestamp(6)
  image         String?
  password      String?
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  updated_at    DateTime  @updatedAt @db.Timestamp(6)

  // Relations
  accounts       Account[]
  sessions       Session[]
  bookmarks      Bookmark[]
  readingHistory ReadingHistory[]
  comments       Comment[]

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime @db.Timestamp(6)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamp(6)

  @@unique([identifier, token])
  @@map("verification_tokens")
}




model Serie {
  id            Int        @id @default(autoincrement())
  title         String
  slug          String     @unique
  description   String     @db.Text
  status        Status
//  type          Type
  postStatus    PostStatus
  image         String?
  alternative   String?
  author        String?
  artist        String?
  serialization String?
  released      String?
  rating        String?
  
// ini buat nyambung k user kalau mau add creator
//  userId   String
//  user     User      @relation(fields: [userId], references: [id])
  
//  genres   Genre[]         @relation(references: [id], onDelete: Cascade)
//  chapters Chapter[]       @relation(references: [id], onDelete: Cascade)
//  bookmarks Bookmark[]     @relation(references: [id], onDelete: Cascade)

  genres   Genre[]
//  chapters Chapter[]
//  bookmarks Bookmark[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Genre {
  id   Int    @id @default(autoincrement())
  name String
  slug String @unique

  series Serie[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bookmark {
  id          String    @id @default(cuid())
  userId      String
  mangaSlug   String
  mangaTitle  String
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @updatedAt @db.Timestamp(6)

  // Relations
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([mangaSlug])
  @@map("bookmarks")
}

model ReadingHistory {
  id           String    @id @default(cuid())
  userId       String
  mangaSlug    String
  mangaTitle   String
  chapterSlug  String
  chapterTitle String
  readAt       DateTime  @default(now()) @db.Timestamp(6)

  // Relations
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([mangaSlug])
  @@index([chapterSlug])
  @@map("reading_histories")
}

model Comment {
  id         String   @id @default(cuid())
  content    String
  userId     String
  mangaSlug  String
  chapter    String?
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  updatedAt  DateTime @updatedAt @db.Timestamp(6)

  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([mangaSlug])
  @@map("comments")
}
