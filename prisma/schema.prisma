generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

enum Status {
  COMPLETED
  ONGOING
}

enum PostStatus {
  PUBLISHED
  DRAFT
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @db.Timestamp(6)
  image         String?
  password      String?
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  updated_at    DateTime  @updatedAt @db.Timestamp(6)

  accounts       Account[]
  sessions       Session[]
  bookmarks      Bookmark[]
  readingHistory ReadingHistory[]
  comments       Comment[]

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime @db.Timestamp(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime @db.Timestamp(6)

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Anime {
  id             String        @id @default(cuid())
  tittle         String?
  judul          String?
  altJudul       String?
  urlLinkSlug    String?
  status         Status
  postStatus     PostStatus
  image          String?
  duration       String?
  musim          String?
  releaseDateOn  String?
  updatedOn      String?
  rating         String?

  genres         Genre[]
  eplister       Episode[]

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Genre {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  animes    Anime[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Episode {
  id           String    @id @default(cuid())
  linkSlug     String?
  title        String?
  epnum        String?
  views        Int       @default(0)
  date         String?
  animeId      String
  anime        Anime     @relation(fields: [animeId], references: [id])
  nontonDetails NontonDetails?
}

model NontonDetails {
  id                 String              @id @default(cuid())
  judul              String?
  altJudul           String?
  gambar             String?
  episodeNumber      String?
  updateDate         String?
  vidutama           String?
  episodeId          String              @unique
  episode            Episode             @relation(fields: [episodeId], references: [id])
  videomirroriframe  VideoMirrorIframe[]
  servervideodl      ServerVideoDL[]
}

model VideoMirrorIframe {
  id              String         @id @default(cuid())
  server          String?
  src             String?
  nontonDetailsId String
  nontonDetails   NontonDetails @relation(fields: [nontonDetailsId], references: [id])
}

model ServerVideoDL {
  id              String         @id @default(cuid())
  server          String?
  links           ServerLink[]
  nontonDetailsId String
  nontonDetails   NontonDetails @relation(fields: [nontonDetailsId], references: [id])
}

model ServerLink {
  id              String         @id @default(cuid())
  url             String?
  text            String?
  serverVideoDLId String
  serverVideoDL   ServerVideoDL @relation(fields: [serverVideoDLId], references: [id])
}

model Bookmark {
  id         String    @id @default(cuid())
  userId     String
  mangaSlug  String
  mangaTitle String
  createdAt  DateTime  @default(now()) @db.Timestamp(6)
  updatedAt  DateTime  @updatedAt @db.Timestamp(6)

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([mangaSlug])
  @@map("bookmarks")
}

model ReadingHistory {
  id           String    @id @default(cuid())
  userId       String
  mangaSlug    String
  mangaTitle   String
  chapterSlug  String
  chapterTitle String
  readAt       DateTime  @default(now()) @db.Timestamp(6)

  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([mangaSlug])
  @@index([chapterSlug])
  @@map("reading_histories")
}

model Comment {
  id         String   @id @default(cuid())
  content    String
  userId     String
  mangaSlug  String
  chapter    String?
  createdAt  DateTime @default(now()) @db.Timestamp(6)
  updatedAt  DateTime @updatedAt @db.Timestamp(6)

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([mangaSlug])
  @@map("comments")
}
